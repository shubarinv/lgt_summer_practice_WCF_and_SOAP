//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------



[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(ConfigurationName="IStream")]
public interface IStream
{
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStream/GetLargeObject", ReplyAction="http://tempuri.org/IStream/GetLargeObjectResponse")]
    System.IO.Stream GetLargeObject(string filename);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStream/GetLargeObject", ReplyAction="http://tempuri.org/IStream/GetLargeObjectResponse")]
    System.Threading.Tasks.Task<System.IO.Stream> GetLargeObjectAsync(string filename);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStream/GetObjectHash", ReplyAction="http://tempuri.org/IStream/GetObjectHashResponse")]
    string GetObjectHash(string filename);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStream/GetObjectHash", ReplyAction="http://tempuri.org/IStream/GetObjectHashResponse")]
    System.Threading.Tasks.Task<string> GetObjectHashAsync(string filename);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStream/WasFileTransferredSuccessfully", ReplyAction="http://tempuri.org/IStream/WasFileTransferredSuccessfullyResponse")]
    bool WasFileTransferredSuccessfully(string filename, string hash);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStream/WasFileTransferredSuccessfully", ReplyAction="http://tempuri.org/IStream/WasFileTransferredSuccessfullyResponse")]
    System.Threading.Tasks.Task<bool> WasFileTransferredSuccessfullyAsync(string filename, string hash);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface IStreamChannel : IStream, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class StreamClient : System.ServiceModel.ClientBase<IStream>, IStream
{
    
    public StreamClient()
    {
    }
    
    public StreamClient(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public StreamClient(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public StreamClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public StreamClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public System.IO.Stream GetLargeObject(string filename)
    {
        return base.Channel.GetLargeObject(filename);
    }
    
    public System.Threading.Tasks.Task<System.IO.Stream> GetLargeObjectAsync(string filename)
    {
        return base.Channel.GetLargeObjectAsync(filename);
    }
    
    public string GetObjectHash(string filename)
    {
        return base.Channel.GetObjectHash(filename);
    }
    
    public System.Threading.Tasks.Task<string> GetObjectHashAsync(string filename)
    {
        return base.Channel.GetObjectHashAsync(filename);
    }
    
    public bool WasFileTransferredSuccessfully(string filename, string hash)
    {
        return base.Channel.WasFileTransferredSuccessfully(filename, hash);
    }
    
    public System.Threading.Tasks.Task<bool> WasFileTransferredSuccessfullyAsync(string filename, string hash)
    {
        return base.Channel.WasFileTransferredSuccessfullyAsync(filename, hash);
    }
}
