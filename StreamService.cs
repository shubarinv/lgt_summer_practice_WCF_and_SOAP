//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Service
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FileMetaData", Namespace="http://schemas.datacontract.org/2004/07/Service")]
    public partial class FileMetaData : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string localFilenameField;
        
        private string remoteFilenameField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string localFilename
        {
            get
            {
                return this.localFilenameField;
            }
            set
            {
                this.localFilenameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string remoteFilename
        {
            get
            {
                return this.remoteFilenameField;
            }
            set
            {
                this.remoteFilenameField = value;
            }
        }
    }
}


[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(ConfigurationName="IStream")]
public interface IStream
{
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStream/GetLargeObject", ReplyAction="http://tempuri.org/IStream/GetLargeObjectResponse")]
    System.IO.Stream GetLargeObject();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStream/GetLargeObject", ReplyAction="http://tempuri.org/IStream/GetLargeObjectResponse")]
    System.Threading.Tasks.Task<System.IO.Stream> GetLargeObjectAsync();
    
    // CODEGEN: Контракт генерации сообщений с именем упаковщика (FileUploadMessage) сообщения FileUploadMessage не соответствует значению по умолчанию (UploadFile).
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IStream/UploadFile")]
    void UploadFile(FileUploadMessage request);
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IStream/UploadFile")]
    System.Threading.Tasks.Task UploadFileAsync(FileUploadMessage request);
    
    // CODEGEN: Контракт генерации сообщений с именем упаковщика (FileDownloadMessage) сообщения FileDownloadMessage не соответствует значению по умолчанию (DownloadFile).
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStream/DownloadFile", ReplyAction="http://tempuri.org/IStream/DownloadFileResponse")]
    FileDownloadReturnMessage DownloadFile(FileDownloadMessage request);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStream/DownloadFile", ReplyAction="http://tempuri.org/IStream/DownloadFileResponse")]
    System.Threading.Tasks.Task<FileDownloadReturnMessage> DownloadFileAsync(FileDownloadMessage request);
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
[System.ServiceModel.MessageContractAttribute(WrapperName="FileUploadMessage", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
public partial class FileUploadMessage
{
    
    [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
    public Service.FileMetaData Metadata;
    
    [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
    public System.IO.Stream FileByteStream;
    
    public FileUploadMessage()
    {
    }
    
    public FileUploadMessage(Service.FileMetaData Metadata, System.IO.Stream FileByteStream)
    {
        this.Metadata = Metadata;
        this.FileByteStream = FileByteStream;
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
[System.ServiceModel.MessageContractAttribute(WrapperName="FileDownloadMessage", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
public partial class FileDownloadMessage
{
    
    [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
    public Service.FileMetaData FileMetaData;
    
    public FileDownloadMessage()
    {
    }
    
    public FileDownloadMessage(Service.FileMetaData FileMetaData)
    {
        this.FileMetaData = FileMetaData;
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
[System.ServiceModel.MessageContractAttribute(WrapperName="FileDownloadReturnMessage", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
public partial class FileDownloadReturnMessage
{
    
    [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
    public Service.FileMetaData DownloadedFileMetadata;
    
    [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
    public System.IO.Stream FileByteStream;
    
    public FileDownloadReturnMessage()
    {
    }
    
    public FileDownloadReturnMessage(Service.FileMetaData DownloadedFileMetadata, System.IO.Stream FileByteStream)
    {
        this.DownloadedFileMetadata = DownloadedFileMetadata;
        this.FileByteStream = FileByteStream;
    }
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface IStreamChannel : IStream, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class StreamClient : System.ServiceModel.ClientBase<IStream>, IStream
{
    
    public StreamClient()
    {
    }
    
    public StreamClient(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public StreamClient(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public StreamClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public StreamClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public System.IO.Stream GetLargeObject()
    {
        return base.Channel.GetLargeObject();
    }
    
    public System.Threading.Tasks.Task<System.IO.Stream> GetLargeObjectAsync()
    {
        return base.Channel.GetLargeObjectAsync();
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    void IStream.UploadFile(FileUploadMessage request)
    {
        base.Channel.UploadFile(request);
    }
    
    public void UploadFile(Service.FileMetaData Metadata, System.IO.Stream FileByteStream)
    {
        FileUploadMessage inValue = new FileUploadMessage();
        inValue.Metadata = Metadata;
        inValue.FileByteStream = FileByteStream;
        ((IStream)(this)).UploadFile(inValue);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    System.Threading.Tasks.Task IStream.UploadFileAsync(FileUploadMessage request)
    {
        return base.Channel.UploadFileAsync(request);
    }
    
    public System.Threading.Tasks.Task UploadFileAsync(Service.FileMetaData Metadata, System.IO.Stream FileByteStream)
    {
        FileUploadMessage inValue = new FileUploadMessage();
        inValue.Metadata = Metadata;
        inValue.FileByteStream = FileByteStream;
        return ((IStream)(this)).UploadFileAsync(inValue);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    FileDownloadReturnMessage IStream.DownloadFile(FileDownloadMessage request)
    {
        return base.Channel.DownloadFile(request);
    }
    
    public Service.FileMetaData DownloadFile(Service.FileMetaData FileMetaData, out System.IO.Stream FileByteStream)
    {
        FileDownloadMessage inValue = new FileDownloadMessage();
        inValue.FileMetaData = FileMetaData;
        FileDownloadReturnMessage retVal = ((IStream)(this)).DownloadFile(inValue);
        FileByteStream = retVal.FileByteStream;
        return retVal.DownloadedFileMetadata;
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    System.Threading.Tasks.Task<FileDownloadReturnMessage> IStream.DownloadFileAsync(FileDownloadMessage request)
    {
        return base.Channel.DownloadFileAsync(request);
    }
    
    public System.Threading.Tasks.Task<FileDownloadReturnMessage> DownloadFileAsync(Service.FileMetaData FileMetaData)
    {
        FileDownloadMessage inValue = new FileDownloadMessage();
        inValue.FileMetaData = FileMetaData;
        return ((IStream)(this)).DownloadFileAsync(inValue);
    }
}
